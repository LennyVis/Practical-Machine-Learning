dat=dcast(ToothGrowth, supp~len, mean, value.var="length")
dat=dcast(ToothGrowth, supp~len, mean, value.var="len")
summary(dat)
dat=dcast(ToothGrowth, len~supp+dose, mean, value.var="len")
summary(Dat)
summary(dat)
head(dat)
dat=dcast(ToothGrowth, len~supp+dose, mean, value.var="supp")
head(dat)
dat=dcast(ToothGrowth, supp+dose~len, mean, value.var="supp")
summary(dat)
?aggregate
aggregate(ToothGrowth, by=c("supp", "dose"), FUN=mean)
aggregate(ToothGrowth, by=list("supp", "dose"), FUN=mean)
dose_factor=as.factor(ToothGrowth$dose)
dose_factor
summary(ToothGrowth$dose)
str(ToothGrowth$dose)
unique(ToothGrowth$dose)
ToothGrowth0.5=subset(ToothGrowth, ToothGrowth$dose==0.5)
ToothGrowth1=subset(ToothGrowth, ToothGrowth$dose==1)
ToothGrowth2=subset(ToothGrowth, ToothGrowth$dose==2)
summary(ToothGrowth0.5)
summary(ToothGrowth1)
summary(ToothGrowth2)
?t.test
t.test(len ~ supp, paired = FALSE,
var.equal = TRUE, data = ToothGrowth2)
t.test(len ~ supp, paired = FALSE,
var.equal = TRUE, data = ToothGrowth1)
t.test(len ~ supp, paired = FALSE,
var.equal = TRUE, data = ToothGrowth0.5)
ToothGrowth0.5
ToothGrowth1
t.test(len ~ supp, paired = FALSE,
+        var.equal = TRUE, data = ToothGrowth0.5)
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth0.5)
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth2)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth2)
?aggregate
aggregate(ToothGrowth0.5, by=list(supp), FUN=mean)
aggregate(ToothGrowth0.5, by=list(ToothGrowth0.5$supp), FUN=mean)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth2)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth0.5)
aggregate(ToothGrowth1, by=list(ToothGrowth1$supp), FUN=mean)
aggregate(ToothGrowth2, by=list(ToothGrowth2$supp), FUN=mean)
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth2)
aggregate(ToothGrowth2, by=list(ToothGrowth2$supp), FUN=var)
aggregate(ToothGrowth1, by=list(ToothGrowth1$supp), FUN=var)
ToothGrowth1$len
ToothGrowth1
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth1)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth1)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth2)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth1)
??t.test
?t.test
library(ggplot2)
fit=lm(mpg~am, data=mtcars)
summary(mtcars)
plot(fit)
cor(mtcars$am, mtcars)
fit=lm(mpg~factor(am), data=mtcars)
summary(fit)
fit1=lm(mpg~factor(am)+carb, data=mtcars)
fit1$coeff
summary(fit1)$cov.unscaled[2]
summary(fit1)
fit3=lm(mpg~factor(am)+factor(vs)+carb, data=mtcars)
fit3$coeff
summary(fit3)$cov.unscaled[2]
summary(fit3)
fit3=lm(mpg~am+vs+carb, data=mtcars)
fit3$coeff
summary(fit3)$cov.unscaled[2]
summary(fit3)
?mtcars
plot(mtcars$am, resid(fit),
+     ylab="Residuals", xlab="am)
abline(0, 0)                  # t
plot(mtcars$am, resid(fit), ylab="Residuals", xlab="am)
")"
)
)
plot(mtcars$am, resid(fit), ylab="Residuals", xlab="am")
influence(fit)
dfbetas(fit3)
round(dfbetas(fit3)[, 2], 3
)
round(hatvalues(fit3), 3)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,
| galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic=fit$coef[1]
ols.ic <- fit$coef[1]
fit$coef vector, fit$coef[2]
ols.slope=fit$coef[2]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhr, rhs)
all.equal(lhs, rhs)
varChild<-var(child)
varChild<-var(galton$child)
varRes=var(fit$residuals)
varRes<-var(fit$residuals)
varEst<-var(esitames(ols.slope, ols.ic))
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChid, varRes+varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$res)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor<-lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit<-lm(child~parent, galton)
sqrt(sum(fit$residuals^2)/(nrows(galton)-2))
sqrt(sum(fit$residuals^2)/(nrow(galton)-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(galton$child. galton$parent))^2
(cor(galton$child, galton$parent))^2
cor(galton$parent,galton$child)^2
?shuttle
linrary(MASS)
library(MASS)
?shuttle
head(shuttle)
log_fit=glm(use~wind, shuttle, family="binomial")
summary(log_fit)
expon( -0.03181)
exp( -0.03181)
log_fit1=glm(use~wind+magn, shuttle, family="binomial")
summary(log_fit1)
exp(-3.201e-02)
log_fit1=glm(use~I(wind:magn), shuttle, family="binomial")
summary(log_fit1)
anova(log_fit, test="ChiSq")
anova(log_fit, test="Chisq")
head(InsectSpray)
head(InsectSprays)
pois_fit=glm(spray~count, InsectSprays, family-"poisson")
pois_fit=glm(spray~count, InsectSprays, family="poisson")
pois_fit=glm(factor(spray)~count, InsectSprays, family="poisson")
pois_fit=glm(factor(spray)~., InsectSprays, family="poisson")
pois_fit=glm(factor(InsectSprays$spray)~., family="poisson")
pois_fit=glm(factor(InsectSprays$spray)~InsectSprays$count, family="poisson")
InsectSprays
InsectSprays_AB=subset(InsectSprays, InsectSprays$spray=="A" | InsectSprays$spray=="B")
pois_fit=glm(factor(InsectSprays_AB$spray)~InsectSprays_AB$count, family="poisson")
pois_fit=glm(InsectSprays_AB$spray~InsectSprays_AB$count, family="poisson")
pois_fit=glm(InsectSprays_AB$spray~InsectSprays_AB$count, offset=InsectSprays_AB$spray, family="poisson")
pois_fit=glm(InsectSprays_AB$count~InsectSprays_AB$spray, family="poisson")
summary(pois_fit)
2.67415/(2.67415+0.05588)
pois_fit=glm(relevel(InsectSprays_AB)$count~InsectSprays_AB$spray, family="poisson")
?relevel
summary(InsectSprays_AB)
relevel(InsectSprays_AB$spray)
relevel(InsectSprays_AB$spray, ref="A")
summary(InsectSprays_AB)
pois_fit=glm(InsectSprays_AB$count~InsectSprays_AB$spray, family="poisson")
summary(pos_fit)
summary(pois_fit)
1/0.05588
exp(2.67415)/exp(2.67415+0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot<-c(0)
knot
splineTerm<-sapply(knot, function(knot)(x>knot)*(x-knot))
?cbind
xMat<-cbind(1, x, splineTerm)
View(xMat)
fit<-lm(y~xMat-1)
summary(fit)
yhat<-predict(fit)
plot(x, y, frame=FALSE, och=21, bg="lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
library(caret)
library(rattle)
library(doParallel)
registerDoParallel(cores=4)
setwd("C:/Users/birk/Documents/Projects/Specialization/Practical Machine Learning/Project")
pmlTraining <-data.frame(read.csv("pml-training.csv"))
pmlTesting <-data.frame(read.csv("pml-testing.csv"))
set.seed(128)
inTrain <- createDataPartition(y=pmlTraining$classe, p=0.75, list=FALSE)
formulaTraining <- pmlTraining[inTrain,]
formulaTesting <- pmlTraining[-inTrain,]
dummies = dummyVars(classe~., data=formulaTraining)
formulaTrainingDummies = predict(dummies, newdata=formulaTraining)
formulaTrainingDummies = data.frame(formulaTrainingDummies)
formulaTestingDummies = predict(dummies, newdata=formulaTesting)
formulaTestingDummies = data.frame(formulaTestingDummies)
nzv <- nearZeroVar(formulaTrainingDummies)
formulaTrainingDummiesNZV = formulaTrainingDummies[,-nzv]
formulaTestingDummiesNZV = formulaTestingDummies[,-nzv]
summary(formulaTestingDummiesNZV)
summary(formulaTestingDummiesNZV$classe)
descrCor = cor(formulaTrainingDummiesNZV, use="complete.obs")
highlyCorDescr = findCorrelation(descrCor, cutoff = .75)
highlyCorDescr
formulaTrainingDummiesNZV = formulaTrainingDummiesNZV[,-highlyCorDescr]
formulaTestingDummiesNZV = formulaTestingDummiesNZV[,-highlyCorDescr]
dim(formulaTrainingDummiesNZV)
dim(formulaTestingDummiesNZV)
Training =formulaTrainingDummiesNZV
Testing = formulaTestingDummiesNZV
Training$classe=formulaTraining$classe
Testing$classe=formulaTesting$classe
trainObjLM = train(classe~., data=Training, method="lm")
Training$classe=as.numeric(formulaTraining$classe)
Testing$classe=as.numeric(formulaTesting$classe)
trainObjLM = train(classe~., data=Training, method="lm")
predTestingLM <- round(predict(trainObjLM, newdata=Testing))
table(predTestingLM, Testing$classe)
length(predTestingLM)
length(testing$classe)
length(Testing$classe)
trainObjGLM = train(classe~., data=Training, method="glm")
predTestingGLM <- round(predict(trainObjGLM, newdata=formulaTestingDummies))
table(predTestingGLM, as.numeric(formulaTesting$classe)-1)
confusionMatrix(predTestingGLM, as.numeric(formulaTesting$classe)-1)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing))
table(predTestingGLM, as.numeric(formulaTesting$classe)-1)
confusionMatrix(predTestingGLM, as.numeric(formulaTesting$classe)-1)
summary(Testing)
nrow(Testing)
summary(Training)
nrow(Training)
trainObjLM = train(classe~., data=Training, preProcess = c("bagImpute"), method="lm")
trainObjLM = train(classe~., data=Training, method="lm")
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action=na.omit()))
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action=na.omit(0)))
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action=na.omit)
)
)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing))
length(predTestingGLM)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.pass()))
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.pass(as.integer(0))))
Testing
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.omit))
length(predTestingGLM)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.pass()))
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.pass(0)))
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action= na.pass(as.integer(0))))
predTestingGLM
trainObjGLM
trainObjGLM$finalModel
trainObjLM = train(classe~., data=Training, preProcess = c("bagImpute"), method="lm")
trainObjLM = train(classe~., data=Training, preProcess = c("medianImpute"), method="lm")
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing))
length(predTestingGLM)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action = na.pass));length(predTestingGLM)
table(predTestingGLM, as.numeric(formulaTesting$classe)-1)
table(predTestingGLM, Testing$classe)
confusionMatrix(predTestingGLM, Testing$classe)
head(predTestingGLM)
head(Testing$classe)
head(Testing$classe, 100)
head(predTestingGLM, 100)
head(predTestingGLM, 1000)
trainObjLM = train(classe~., data=Training, preProcess = c("knnImpute"), method="lm")
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action = na.pass))
table(predTestingGLM, Testing$classe)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing, na.action = na.pass))
length(predTestingGLM)
head(predTestingGLM)
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing))
length(predTestingGLM)
summary(Training)
allNAcolumns = sapply(Training, function(x)is.na(x))
allNAcolumns
allNAcolumns = lapply(Training, function(x)is.na(x))
allNAcolumns
tmpres<-t(stats(Training))
?stats
install.packages("stats")
install.packages("stats")
library(stats)
tmpres<-t(stats(Training))
?stats
"stats"
library(fields)
install.packages('fields')
library(fields)
summary(Training)
library(spam)
install.packages(spam)
install.packages("spam")
library(fields)
Training_tmp=Training
colnames(Training_tmp)[colSums(is.na(Training_tmp)>0)]
summary(Training_tmp)
names(which(colSums(is.na(Training_tmp))))
names(which(colSums(is.na(Training_tmp))>0))
col_remove=names(which(colSums(is.na(Training_tmp))>0))
Training_tmp[, col_remove] = NULL
Training_tmp[col_remove] = NULL
Training_sub=Training_tmp[, !(names(Training_tmp) %in% col_remove])
Training_sub=Training_tmp[, !(names(Training_tmp) %in% col_remove)]
col_remove=names(which(colSums(is.na(Training_tmp))>14,000))
col_remove
Training=Training[, !(names(Training) %in% col_remove)]
Testing = Testing[, !(names(TEsting) %in% col_remove)]
Training=Training[, !(names(Training) %in% col_remove)]
Testing = Testing[, !(names(Testing) %in% col_remove)]
trainObjLM = train(classe~., data=Training, method="lm")
predTestingGLM <- round(predict(trainObjGLM, newdata=Testing))
colnames(Training)
colnames(Testing)
diff(colnames(Training), colnames(Testing))
Training[!(Training %in% Testing)]
trainObjLM = train(classe~., data=Training, method="lm")
predTestingGLM <- round(predict(trainObjLM, newdata=Testing))
table(predTestingGLM, Testing$classe)
confusionMatrix(predTestingGLM, Testing$classe)
Training =formulaTrainingDummiesNZV
Testing = formulaTestingDummiesNZV
Training$classe=as.numeric(formulaTraining$classe)
Testing$classe=as.numeric(formulaTesting$classe)
trainObjLM = train(classe~., data=Training, method="lm")
trainObjLM = train(classe~., data=Training, method="lm", preProcess="medianImpute")
predTestingGLM <- round(predict(trainObjLM, newdata=Testing))
table(predTestingGLM, Testing$classe)
col_remove=names(which(colSums(is.na(Training))>14,000))
Training=Training[, !(names(Training) %in% col_remove)]
Testing = Testing[, !(names(Testing) %in% col_remove)]
trainObjLM = train(classe~., data=Training, method="glm")
predTestingGLM <- round(predict(trainObjLM, newdata=Testing))
table(predTestingGLM, Testing$classe)
confusionMatrix(predTestingGLM, Testing$classe)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjectRPARTcv = train(classe ~ ., data = Training, method = "rpart", trControl = cvCtrl)
finalModelRPARTcv = trainObjectRPARTcv$finalModel
Plotting the tree. We can see that the only variable which was used in this case for the decision making is the X variable
Plotting the decision tree
```{r fig.width=7, fig.height=6}
fancyRpartPlot(finalModelRPARTcv)
```
predictTestingRPART = predict(trainObjectRPARTcv, newdata = Testing)
table(predictTestingRPART, Testing$classe)
confusionMatrix(predTestingRPART, Testing$classe)
predTestingRPART = predict(trainObjectRPARTcv, newdata = Testing)
table(predTestingRPART, Testing$classe)
confusionMatrix(predTestingRPART, Testing$classe)
predTestingRPART = round(predict(trainObjectRPARTcv, newdata = Testing))
head(predTestingRPART)
table(predTestingRPART, Testing$classe)
confusionMatrix(predTestingRPART, Testing$classe)
fancyRpartPlot(finalModelRPARTcv)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLM = train(classe~., data=Training, method="lm", trControl=cvCtrl)
trainObjLM
predTestingGLM <- round(predict(trainObjLM, newdata=Testing))
table(predTestingGLM, Testing$classe)
confusionMatrix(predTestingGLM, Testing$classe)
trainObjLM = train(classe~., data=Training, method="lm", trControl=cvCtrl, verbose=FALSE)
trainObjectRPARTcv
gmbGrid = expand.grid(cp=c(0.03, 0.035, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65))
trainObjectRPARTcv = train(classe ~ ., data = Training, method = "rpart", trControl = cvCtrl)
trainObjectRPARTcv = train(classe ~ ., data = Training, method = "rpart", trControl = cvCtrl, tuneGrid = gmbGrid)
trainObjectRPARTcv
trainObjectRPARTcv = train(classe ~ ., data = Training, method = "rpart", trControl = cvCtrl, tuneGrid = gmbGrid)
finalModelRPARTcv = trainObjectRPARTcv$finalModel
fancyRpartPlot(finalModelRPARTcv)
predTestingRPART = round(predict(trainObjectRPARTcv, newdata = Testing))
table(predTestingRPART, Testing$classe)
confusionMatrix(predTestingRPART, Testing$classe)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjectGBM = train(classe ~ ., data = Training, method = "gbm", trControl = cvCtrl)
fancyRpartPlot(finalModelGBM)
finalModelGBM = trainObjectRPARTGBM$finalModel
finalModelGBM = trainObjectGBM$finalModel
fancyRpartPlot(finalModelGBM)
predTestingGBM = round(predict(trainObjectGBM, newdata = Testing))
table(predTestingGBM, Testing$classe)
confusionMatrix(predTestingGBM, Testing$classe)
trainObjectGBM
dim(Training)
summary(TRaining)
summary(Training)
trainObjBAG = bag(Training[,c(0:53)], Training$classe, B=3,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate,
allowParallel = TRUE))
trainObjBAG
predTestingBAG = round(predict(trainObjBAG, newdata = Testing))
table(predTestingBAG, Testing$classe)
confusionMatrix(predTestingBAG, Testing$classe)
trainObjBAG = bag(Training[,c(0:53)], Training$classe, B=5,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate,
allowParallel = TRUE))
predTestingBAG = round(predict(trainObjBAG, newdata = Testing))
table(predTestingBAG, Testing$classe)
confusionMatrix(predTestingBAG, Testing$classe)
trainObjBAG$finalModel
trainObjBAG
trainObjBAG$fits[1]
trainObjBAG$fits[[1]]$fit
plot(Testing$X,Testing$classe,col='lightgrey',pch=19)
points(Testing$X,predict(trainObjBAG$fits[[1]]$fit,Testing),pch=19,col="red")
points(ozone$ozone,predict(trainObjBAG,Testing),pch=19,col="blue")
points(Testing$X,predict(trainObjBAG,Testing),pch=19,col="blue")
points(Testing$X,predict(trainObjBAG$fits[[1]]$fit,Testing),pch=10,col="red")
points(Testing$X,predict(trainObjBAG,Testing),pch8,col="blue")
points(Testing$X,predict(trainObjBAG,Testing),pch=8,col="blue")
plot(Testing$X,Testing$classe,col='lightgrey',pch=19)
points(Testing$X,predict(trainObjBAG$fits[[1]]$fit,Testing),pch=3,col="red")
points(Testing$X,predict(trainObjBAG,Testing),pch=2,col="blue")
plot(Testing$X,Testing$classe,col='lightgrey',pch=19)
points(Testing$X,predict(trainObjBAG$fits[[1]]$fit,Testing),pch=24,col="red")
points(Testing$X,predict(trainObjBAG,Testing),pch=25,col="blue")
plot(Testing$X,Testing$classe,col='lightgrey',pch=19)
points(Testing$X,predict(trainObjBAG,Testing),pch=20,col="blue")
cvCtrl <- trainControl(allowParallel = TRUE)
trainObjectGBM = train(classe ~ ., data = Training, method = "bag", trControl = cvCtrl)
```
Training$classe
trainObjectGBM = train(classe ~ X, data = Training, method = "bag", trControl = cvCtrl)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="glmboost"", trControl=cvCtrl, verbose=FALSE)
)
""
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="glmboost", trControl=cvCtrl, verbose=FALSE)
predTestingLMBoost <- round(predict(trainObjLMBoost, newdata=Testing))
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="LogitBoost", trControl=cvCtrl, verbose=FALSE)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="kknn", trControl=cvCtrl, verbose=FALSE)
install.packages(pkg[!good])
install.packages("knn")
install.packages("kknn")
install.packages("kknn")
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="kknn", trControl=cvCtrl, verbose=FALSE)
install.packages("igraph")
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjLMBoost = train(classe~., data=Training, method="kknn", trControl=cvCtrl, verbose=FALSE)
predTestingLMBoost <- round(predict(trainObjLMBoost, newdata=Testing))
table(predTestingLMBoost, Testing$classe)
confusionMatrix(predTestingLMBoost, Testing$classe)
trainObjLMBoost
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjKKNN = train(classe~., data=Training, method="kknn", trControl=cvCtrl, verbose=FALSE)
predTestingKKNN <- round(predict(trainObjKKNN, newdata=Testing))
table(predTestingKKNN, Testing$classe)
confusionMatrix(predTestingKKNN, Testing$classe)
trainObjKKNN$finalModel
plot(trainObjKKNN)
plot(trainObjKKNN$finalModel)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjleapForward = train(classe~., data=Training, method="leapForward", trControl=cvCtrl, verbose=FALSE)
trainObjleapForward = train(classe~., data=Training, method="leapForward", trControl=cvCtrl, verbose=FALSE)
cvCtrl <- trainControl(method = "cv", number=5, allowParallel = TRUE)
trainObjleapForward = train(classe~., data=Training, method="leapForward", trControl=cvCtrl, verbose=FALSE)
predTestingleapForward <- round(predict(trainObjleapForward, newdata=Testing)
)
table(predTestingleapForward, Testing$classe)
confusionMatrix(predTestingleapForward, Testing$classe)
trainObjleapForward
trainObjleapForward$finalModel
plot(trainObjleapForward)
plot(trainObjleapForward$finalModel)
trainObjleapForward$finalModel
cvCtrl <- trainControl(method = "cv", number=3, allowParallel = TRUE)
trainObjleapForward = train(classe~., data=Training, method="leapForward", trControl=cvCtrl, verbose=FALSE)
predTestingleapForward <- round(predict(trainObjleapForward, newdata=Testing))
table(predTestingleapForward, Testing$classe)
confusionMatrix(predTestingleapForward, Testing$classe)
gmbGrid = expand.grid(nvmax=c(1, 2, 3, 4, 5, 6, 7, 8))
cvCtrl <- trainControl(method = "cv", number=3, allowParallel = TRUE)
trainObjleapForward = train(classe~., data=Training, method="leapForward", trControl=cvCtrl, tuneGrid = gmbGrid, verbose=FALSE)
predTestingleapForward <- round(predict(trainObjleapForward, newdata=Testing))
table(predTestingleapForward, Testing$classe)
confusionMatrix(predTestingleapForward, Testing$classe)
trainObjleapForward
